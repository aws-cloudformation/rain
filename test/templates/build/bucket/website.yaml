Description: |
  Creates a static website using S3 and CloudFront.
  Generated by CloudFormation Rain (rain build -b bucket website).
  Apache-2.0 License. Adapt this template to your needs and thoruoughly test
  it before introducing it in a production environment. **WARNING** This
  template will create resources in your account that may incur billing
  charges.

Metadata:
  AWSToolsMetrics:
    Rain: '{"Version":"v1.23.1","Experimental":true,"HasModules":true,"HasRainSection":false}'

Parameters:
  ApplicationName:
    Description: This name be used as a prefix for resource names
    Type: String

  WebACL:
    Description: The web acl id of a CLOUDFRONT scoped web acl in us-east-1
    Type: String

  ContentDir:
    Description: An optional directory to upload to the bucket
    Type: String
    Default: RAIN_NO_CONTENT

Resources:
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Join
          - ""
          - - rain-build-website-
            - !Select
              - 2
              - !Split
                - /
                - !Ref AWS::StackId
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  Distribution:
    Type: AWS::CloudFront::Distribution
    Metadata:
      checkov:
        skip:
          - id: CKV_AWS_174
            comment: Using the default cloudfront certificate with no aliases
      guard:
        SuppressedRules:
          - CLOUDFRONT_CUSTOM_SSL_CERTIFICATE
          - CLOUDFRONT_ORIGIN_FAILOVER_ENABLED
          - CLOUDFRONT_SNI_ENABLED
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          CachePolicyId: rain-build-cache-policy-1
          Compress: true
          TargetOriginId: rain-build-origin-1
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt CloudFrontLogsBucket.RegionalDomainName
        Origins:
          - DomainName: !GetAtt ContentBucket.RegionalDomainName
            Id: rain-build-origin-1
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        WebACLId: !Ref WebACL

  ContentLogBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: This bucket records access logs for the main bucket
      checkov:
        skip:
          - comment: This is the log bucket
            id: CKV_AWS_18
      guard:
        SuppressedRules:
          - S3_BUCKET_LOGGING_ENABLED
          - S3_BUCKET_REPLICATION_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete: false
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${ApplicationName}-logs-${AWS::Region}-${AWS::AccountId}
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: COMPLIANCE
            Years: 1
      ObjectLockEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  ContentBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
          - S3_BUCKET_DEFAULT_LOCK_ENABLED
      Rain:
        Content: !Ref ContentDir
        EmptyOnDelete: false
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${ApplicationName}-${AWS::Region}-${AWS::AccountId}
      LoggingConfiguration:
        DestinationBucketName: !Ref ContentLogBucket
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration:
        Role: !GetAtt ContentReplicationRole.Arn
        Rules:
          - Destination:
              Bucket: !GetAtt ContentReplicaBucket.Arn
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled

  ContentReplicaBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: This bucket is used as a target for replicas from the main bucket
      checkov:
        skip:
          - comment: This is the replica bucket
            id: CKV_AWS_18
      guard:
        SuppressedRules:
          - S3_BUCKET_DEFAULT_LOCK_ENABLED
          - S3_BUCKET_REPLICATION_ENABLED
          - S3_BUCKET_LOGGING_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete: false
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${ApplicationName}-replicas-${AWS::Region}-${AWS::AccountId}
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  ContentReplicationPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetReplicationConfiguration
              - s3:ListBucket
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-${AWS::Region}-${AWS::AccountId}
          - Action:
              - s3:GetObjectVersionForReplication
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-${AWS::Region}-${AWS::AccountId}/*
          - Action:
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicationTags
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: "2012-10-17"
      PolicyName: bucket-replication-policy
      RoleName: !Ref ContentReplicationRole

  ContentReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
        Version: "2012-10-17"
      Path: /

  ContentLogBucketPolicyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${ApplicationName}-logs-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-logs-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-logs-${AWS::Region}-${AWS::AccountId}/*
          - Action: s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-logs-${AWS::Region}-${AWS::AccountId}
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-logs-${AWS::Region}-${AWS::AccountId}/*
        Version: "2012-10-17"

  ContentBucketPolicyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${ApplicationName}-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-${AWS::Region}-${AWS::AccountId}/*
          - Action: s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-${AWS::Region}-${AWS::AccountId}
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-${AWS::Region}-${AWS::AccountId}/*
        Version: "2012-10-17"

  ContentReplicaBucketPolicyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${ApplicationName}-replicas-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-replicas-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-replicas-${AWS::Region}-${AWS::AccountId}/*
          - Action: s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-replicas-${AWS::Region}-${AWS::AccountId}
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: "2012-10-17"

  CloudFrontLogsLogBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: This bucket records access logs for the main bucket
      checkov:
        skip:
          - comment: This is the log bucket
            id: CKV_AWS_18
      guard:
        SuppressedRules:
          - S3_BUCKET_LOGGING_ENABLED
          - S3_BUCKET_REPLICATION_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete: false
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${ApplicationName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: COMPLIANCE
            Years: 1
      ObjectLockEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  CloudFrontLogsBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
          - S3_BUCKET_DEFAULT_LOCK_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete: false
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${ApplicationName}-cflogs-${AWS::Region}-${AWS::AccountId}
      LoggingConfiguration:
        DestinationBucketName: !Ref CloudFrontLogsLogBucket
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration:
        Role: !GetAtt CloudFrontLogsReplicationRole.Arn
        Rules:
          - Destination:
              Bucket: !GetAtt CloudFrontLogsReplicaBucket.Arn
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled

  CloudFrontLogsReplicaBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: This bucket is used as a target for replicas from the main bucket
      checkov:
        skip:
          - comment: This is the replica bucket
            id: CKV_AWS_18
      guard:
        SuppressedRules:
          - S3_BUCKET_DEFAULT_LOCK_ENABLED
          - S3_BUCKET_REPLICATION_ENABLED
          - S3_BUCKET_LOGGING_ENABLED
      Rain:
        Content: RAIN_NO_CONTENT
        EmptyOnDelete: false
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${ApplicationName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  CloudFrontLogsReplicationPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetReplicationConfiguration
              - s3:ListBucket
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-${AWS::Region}-${AWS::AccountId}
          - Action:
              - s3:GetObjectVersionForReplication
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-${AWS::Region}-${AWS::AccountId}/*
          - Action:
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicationTags
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: "2012-10-17"
      PolicyName: bucket-replication-policy
      RoleName: !Ref CloudFrontLogsReplicationRole

  CloudFrontLogsReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
        Version: "2012-10-17"
      Path: /

  CloudFrontLogsLogBucketPolicyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${ApplicationName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}/*
          - Action: s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}/*
        Version: "2012-10-17"

  CloudFrontLogsBucketPolicyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${ApplicationName}-cflogs-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-${AWS::Region}-${AWS::AccountId}/*
          - Action: s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-${AWS::Region}-${AWS::AccountId}
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-${AWS::Region}-${AWS::AccountId}/*
        Version: "2012-10-17"

  CloudFrontLogsReplicaBucketPolicyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${ApplicationName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}/*
          - Action: s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ApplicationName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: "2012-10-17"

Outputs:
  SiteURL:
    Value: !Sub https://${Distribution.DomainName}
